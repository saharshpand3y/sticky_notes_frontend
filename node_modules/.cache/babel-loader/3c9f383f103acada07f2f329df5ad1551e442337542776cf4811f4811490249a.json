{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\n\n// Define the login function\nexport const login = async credentials => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, credentials); // Replace '/login' with your actual login endpoint\n    return response.data; // Assuming the backend sends back a token or user data\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n    throw error;\n  }\n};\nexport const getNotes = async () => {\n  const response = await axios.get(`${API_URL}/notes`, getAuthHeaders());\n  return response.data;\n};\nexport const createNote = async note => {\n  const response = await axios.post(`${API_URL}/notes`, note, getAuthHeaders());\n  return response.data;\n};\nexport const deleteNote = async id => {\n  await axios.delete(`${API_URL}/notes/${id}`, getAuthHeaders());\n};\nexport const updateNote = async note => {\n  const response = await axios.put(`${API_URL}/notes/${note.id}`, note, getAuthHeaders());\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","token","localStorage","getItem","headers","Authorization","login","credentials","response","post","data","error","console","getNotes","get","createNote","note","deleteNote","id","delete","updateNote","put"],"sources":["/home/saharsh/Sticky_Notes_APP/sticky-notes-frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:5000\";\n\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n};\n\n// Define the login function\nexport const login = async (credentials) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, credentials); // Replace '/login' with your actual login endpoint\n    return response.data; // Assuming the backend sends back a token or user data\n  } catch (error) {\n    console.error(\"Login failed:\", error);\n    throw error;\n  }\n};\n\nexport const getNotes = async () => {\n  const response = await axios.get(`${API_URL}/notes`, getAuthHeaders());\n  return response.data;\n};\n\nexport const createNote = async (note) => {\n  const response = await axios.post(`${API_URL}/notes`, note, getAuthHeaders());\n  return response.data;\n};\n\nexport const deleteNote = async (id) => {\n  await axios.delete(`${API_URL}/notes/${id}`, getAuthHeaders());\n};\n\nexport const updateNote = async (note) => {\n  const response = await axios.put(\n    `${API_URL}/notes/${note.id}`,\n    note,\n    getAuthHeaders()\n  );\n  return response.data;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO;IACLC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUJ,KAAK;IAChC;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMK,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,QAAQ,EAAEQ,WAAW,CAAC,CAAC,CAAC;IACpE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAML,QAAQ,GAAG,MAAMV,KAAK,CAACgB,GAAG,CAAC,GAAGf,OAAO,QAAQ,EAAEC,cAAc,CAAC,CAAC,CAAC;EACtE,OAAOQ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMR,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,GAAGV,OAAO,QAAQ,EAAEiB,IAAI,EAAEhB,cAAc,CAAC,CAAC,CAAC;EAC7E,OAAOQ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,MAAOC,EAAE,IAAK;EACtC,MAAMpB,KAAK,CAACqB,MAAM,CAAC,GAAGpB,OAAO,UAAUmB,EAAE,EAAE,EAAElB,cAAc,CAAC,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMoB,UAAU,GAAG,MAAOJ,IAAI,IAAK;EACxC,MAAMR,QAAQ,GAAG,MAAMV,KAAK,CAACuB,GAAG,CAC9B,GAAGtB,OAAO,UAAUiB,IAAI,CAACE,EAAE,EAAE,EAC7BF,IAAI,EACJhB,cAAc,CAAC,CACjB,CAAC;EACD,OAAOQ,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}