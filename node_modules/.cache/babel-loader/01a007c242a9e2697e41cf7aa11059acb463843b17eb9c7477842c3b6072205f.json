{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\n\n// Helper function to get Authorization headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"No token found in localStorage\");\n  }\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\n\n// Centralized error handler for API calls\nconst handleApiError = error => {\n  if (error.response) {\n    // Server responded with a status code outside the range of 2xx\n    console.error(\"API Error:\", error.response.data);\n    throw new Error(error.response.data.message || \"An error occurred\");\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error(\"No response received from server:\", error.request);\n    throw new Error(\"No response received from server\");\n  } else {\n    // Something else caused the error\n    console.error(\"Error:\", error.message);\n    throw new Error(error.message);\n  }\n};\n\n// Define the login function\nexport const login = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      username,\n      password\n    });\n    const {\n      token\n    } = response.data;\n    localStorage.setItem(\"token\", token); // Save token to localStorage\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Fetch all notes\nexport const getNotes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/notes`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Create a new note\nexport const createNote = async note => {\n  try {\n    const response = await axios.post(`${API_URL}/notes`, note, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Delete a note by ID\nexport const deleteNote = async id => {\n  try {\n    await axios.delete(`${API_URL}/notes/${id}`, getAuthHeaders());\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Update an existing note\nexport const updateNote = async note => {\n  try {\n    const response = await axios.put(`${API_URL}/notes/${note.id}`, note, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};","map":{"version":3,"names":["axios","API_URL","getAuthHeaders","token","localStorage","getItem","console","error","headers","Authorization","handleApiError","response","data","Error","message","request","login","username","password","post","setItem","getNotes","get","createNote","note","deleteNote","id","delete","updateNote","put"],"sources":["/home/saharsh/sticky-notes-frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:5000\";\n\n// Helper function to get Authorization headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"No token found in localStorage\");\n  }\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n};\n\n// Centralized error handler for API calls\nconst handleApiError = (error) => {\n  if (error.response) {\n    // Server responded with a status code outside the range of 2xx\n    console.error(\"API Error:\", error.response.data);\n    throw new Error(error.response.data.message || \"An error occurred\");\n  } else if (error.request) {\n    // Request was made but no response received\n    console.error(\"No response received from server:\", error.request);\n    throw new Error(\"No response received from server\");\n  } else {\n    // Something else caused the error\n    console.error(\"Error:\", error.message);\n    throw new Error(error.message);\n  }\n};\n\n// Define the login function\nexport const login = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      username,\n      password,\n    });\n    const { token } = response.data;\n    localStorage.setItem(\"token\", token); // Save token to localStorage\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Fetch all notes\nexport const getNotes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/notes`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Create a new note\nexport const createNote = async (note) => {\n  try {\n    const response = await axios.post(\n      `${API_URL}/notes`,\n      note,\n      getAuthHeaders()\n    );\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Delete a note by ID\nexport const deleteNote = async (id) => {\n  try {\n    await axios.delete(`${API_URL}/notes/${id}`, getAuthHeaders());\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n\n// Update an existing note\nexport const updateNote = async (note) => {\n  try {\n    const response = await axios.put(\n      `${API_URL}/notes/${note.id}`,\n      note,\n      getAuthHeaders()\n    );\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}